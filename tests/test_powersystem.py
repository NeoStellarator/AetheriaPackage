import powersystem
import random
import pytest


def test_energy_cruise_weight_when_echo_is_0():
    echo = 0
    Etot = 100
    mtank , m_bat =powersystem.energy_cruise_weight(Etot,0,1,1)
    assert mtank == 0

def test_energy_cruise_weight_when_echo_is_1():
    Etot = 100
    mtank , m_bat =powersystem.energy_cruise_weight(Etot,1,1,1)
    assert m_bat == 0

def test_energy_cruise_weight_check_echo_between_0_and_1():
    Etot = 100
    EspTank = 2
    EspBat = 0.3
    echo = random.random()
    
    mtank,mbat = powersystem.energy_cruise_weight(Etot,echo,EspTank,EspBat)
    
    Eafter = mtank * EspTank + mbat * EspBat
    assert Etot == pytest.approx(Eafter)

def test_power_cruise_weight_when_when_echo_is_0():
    Etot = 100
    mFC , m_bat =powersystem.power_cruise_weight(100,0,2,3)
    assert mFC == 0

def test_power_cruise_weight_when_when_echo_is_1():
    Etot = 100
    mFC , m_bat =powersystem.power_cruise_weight(100,1,2,3)
    assert m_bat == 0

def test_power_cruise_weight_echo_between_0_1():
    # Define test inputs and expected outputs
    power_required = 10.0
    echo = random.random()
    power_density_fc = 0.1
    power_density_battery = 0.2

    # Call the function with the test inputs
    fc_weight, battery_weight = powersystem.power_cruise_weight(
        power_required,
        echo,
        power_density_fc,
        power_density_battery
    )

    # Check that the power required equals the sum of the power generated by the fuel cell and the battery
    expected_power_required = (
        fc_weight * power_density_fc  +
        battery_weight * power_density_battery 
    )
    assert pytest.approx(power_required, 0.01) == expected_power_required

def test_power_cruise_weight_when_when_echo_is_0():
    Etot = 100
    mFC , m_bat =powersystem.hover_weight()
    assert mFC == 0

def test_power_cruise_weight_when_when_echo_is_1():
    Etot = 100
    mFC , m_bat =powersystem.power_cruise_weight(100,1,2,3)
    assert m_bat == 0

